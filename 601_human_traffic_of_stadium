select id, visit_date, people
from (
select *, 
    row_number() over (order by id rows between 2 preceding and current row) r1,
    row_number() over (order by id rows between 1 preceding and 1 following) r2,
    row_number() over (order by id rows between current row and 2 following) r3
from Stadium 
where people >= 100)t
where r1 =3 or r2 =3 or r3 = 3
order by visit_date
### wrong
###1)should use count(*) or count(id) to get the number of ids
###2)should use range instead of rows to get consecutive id because 'rows' can't identify the value of the id but 'range' can


select ID, visit_date, people, 
count(*) over (order by timestamp(visit_date) range between current row and 2 following) follow_cnt,
count(*) over (order by timestamp(visit_date) range between 2 preceding and current row) prec_cnt,
count(*) over (order by timestamp(visit_date) range between 1 preceding and 1 following) curr_cnt
from Stadium
where people >= 100
###wrong
### if order by "date" type, range should look like below:
select *, 
count(id) over (order by timestamp(visit_date) range between current row and interval 2 day following) follow_cnt, 
count(id) over (order by timestamp(visit_date) range between interval 2 day preceding and current row) prec_cnt,
count(id) over (order by timestamp(visit_date) range between interval 1 day preceding and interval 1 day following) curr_cnt
from Stadium
where people >= 100

Result (the count() will follow the date order):
["id", "visit_date", "people", "follow_cnt", "prec_cnt", "curr_cnt"], 
[2, "2017-01-02",  109,         2 (2,3),       1 (2),     2 (2,3)], 
[3, "2017-01-03",   150,        2 (3,5),       2 (2,3),   2 (2,3)], 
[5, "2017-01-05",   145,        3 (5,6,7),     2 (3,5),   2 (5,6)], 
[6, "2017-01-06",   1455,       2 (6,7),       2 (5,6),   3 (5,6,7)], 
[7, "2017-01-07",   199,        2 (7,8),       3 (5,6,7), 2 (6,7)], 
[8, "2017-01-09",   188,        1 (8),         2 (7,8),   1 (8)]

###correct answer
select id, visit_date, people
from (
select *, 
    count(id) over (order by id range between current row and 2 following) c1,
    count(id) over (order by id range between 2 preceding and current row) c2,
    count(id) over (order by id range between 1 preceding and 1 following) c3
from Stadium 
where people >= 100) t
where c1 =3 or c2 =3 or c3=3
Result of the window function (the count will follow the id order):
["id", "visit_date", "people", "c1",      "c2", "c3"], 
[2, "2017-01-02",     109,      2 (2,3),   1, 2], 
[3, "2017-01-03",     150,      2 (3,5),   2, 2], 
[5, "2017-01-05",     145,      3 (5,6,7), 2, 2], 
[6, "2017-01-06",     1455,     3 (6,7,8), 2, 3], 
[7, "2017-01-07",     199,      2 (7,8),   3, 3], 
[8, "2017-01-09",     188,      1 (8),     3, 2]]}


if use 'rows' instead of 'range', here is the result looks like. rows can't identify if the id is consecutive or not
["id", "visit_date", "people", "c1", "c2", "c3"], 
[2, "2017-01-02", 109, 3 (2,3,5), 1, 2], 
[3, "2017-01-03", 150, 3, 2, 3], 
[5, "2017-01-05", 145, 3, 3, 3], 
[6, "2017-01-06", 1455, 3, 3, 3], 
[7, "2017-01-07", 199, 2, 3, 3], 
[8, "2017-01-09", 188, 1, 3, 2]]}

